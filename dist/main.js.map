{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-san/./src/parser/read-ident.js","webpack://my-san/./src/parser/read-unary-expr.js","webpack://my-san/./src/parser/expr-type.js","webpack://my-san/./src/parser/read-string.js","webpack://my-san/./src/parser/read-parenthesized-expr.js","webpack://my-san/./src/parser/read-call.js","webpack://my-san/./src/parser/read-accessor.js","webpack://my-san/./src/parser/read-multiplicative-expr.js","webpack://my-san/./src/parser/read-additive-expr.js","webpack://my-san/./src/parser/read-relational-expr.js","webpack://my-san/./src/parser/read-logical-and-expr.js","webpack://my-san/./src/parser/read-equality-expr.js","webpack://my-san/./src/parser/read-logical-or-expr.js","webpack://my-san/./src/parser/read-tertiary-expr.js","webpack://my-san/./src/parser/walker.js","webpack://my-san/./src/parser/parse-Expr.js","webpack://my-san/./src/runtime/data.js","webpack://my-san/./src/main.js"],"sourcesContent":["/**\r\n * 读取ident\r\n * 这里的 ident 指标识符(identifier)，也就是通常意义上的变量名\r\n * 这里默认的变量名规则为：由美元符号($)、数字、字母或者下划线(_)构成的字符串\r\n *\r\n * @inner\r\n * @param {Walker} walker 源码读取对象\r\n * @return {string}\r\n */\r\n\r\nexport function readIdent (walker) {\r\n    let match = walker.match(/\\s*([\\$0-9a-z_]+)/ig, 1);\r\n\r\n    if (!match) {\r\n        throw new Error('[SAN FATAL] expect an ident: ' + walker.source.slice(walker.index));\r\n    }\r\n\r\n    return match[1];\r\n}","import { ExprType } from './expr-type.js'\r\nimport { readString } from './read-string.js'\r\nimport { readTertiaryExpr } from './read-tertiary-expr.js'\r\nimport { readCall }  from './read-call';\r\nimport { readParenthesizedExpr } from './read-parenthesized-expr.js';\r\n\r\nfunction postUnaryExpr (expr, operator) {\r\n    switch (operator) {\r\n        case 33:\r\n            var value;\r\n            switch (expr.type) {\r\n                case ExprType.NUMBER:\r\n                case ExprType.STRING:\r\n                case ExprType.BOOL:\r\n                    value = !expr.value;\r\n                    break;\r\n                case ExprType.ARRAY:\r\n                case ExprType.OBJECT:\r\n                    value = false;\r\n                    break;\r\n                case ExprType.NULL:\r\n                    value = true;\r\n                    break;\r\n            }\r\n\r\n            if (value != null) {\r\n                return {\r\n                    type: ExprType.BOOL,\r\n                    value: value\r\n                };\r\n            }\r\n            break;\r\n\r\n        case 43:\r\n            switch (expr.type) {\r\n                case ExprType.NUMBER:\r\n                case ExprType.STRING:\r\n                case ExprType.BOOL:\r\n                    return {\r\n                        type: ExprType.NUMBER,\r\n                        value: +expr.value\r\n                    };\r\n            }\r\n            break;\r\n\r\n        case 45:\r\n            switch (expr.type) {\r\n                case ExprType.NUMBER:\r\n                case ExprType.STRING:\r\n                case ExprType.BOOL:\r\n                    return {\r\n                        type: ExprType.NUMBER,\r\n                        value: -expr.value\r\n                    };\r\n            }\r\n            break;\r\n    }\r\n\r\n    return {\r\n        type: ExprType.UNARY,\r\n        expr: expr,\r\n        operator: operator\r\n    };\r\n}\r\n\r\n/**\r\n * 读取一元表达式\r\n *\r\n * @param {Walker} walker 源码读取对象\r\n * @return {Object}\r\n */\r\nexport function readUnaryExpr (walker) {\r\n    walker.goUntil()\r\n\r\n    let currentCode = walker.source.charCodeAt(walker.index)\r\n    switch(currentCode){\r\n        case 33: // !\r\n        case 43: // +\r\n        case 45: // -\r\n            walker.index++\r\n            return postUnaryExpr(readUnaryExpr(walker), currentCode)\r\n        case 34: //\"\r\n        case 39: //'\r\n            return readString(walker)\r\n        case 48: // number\r\n        case 49:\r\n        case 50:\r\n        case 51:\r\n        case 52:\r\n        case 53:\r\n        case 54:\r\n        case 55:\r\n        case 56:\r\n        case 57:\r\n            return {\r\n                type: ExprType.NUMBER,\r\n                value: +(walker.match(/[0-9]+(\\.[0-9]+)?/g, 1)[0])\r\n            };\r\n        case 40: //(\r\n            return readParenthesizedExpr(walker)\r\n        //数组\r\n        case 91: //[\r\n            walker.index++\r\n            let arrItems = []\r\n            while(!walker.goUntil(93)){ //]\r\n                let item = {}\r\n                arrItems.push(item)\r\n\r\n                if(walker.source.charCodeAt(walker.index) === 46 && walker.match(/\\.\\.\\.\\s*/g)){\r\n                    item.spread = true\r\n                }\r\n\r\n                item.expr = readTertiaryExpr(walker)\r\n                walker.goUntil(44) // ,\r\n            }\r\n\r\n            return {\r\n                type: ExprType.ARRAY,\r\n                items: arrItems\r\n            }\r\n        case 123: //对象\r\n            walker.index++\r\n            let objItems = []\r\n\r\n            while(!walker.goUntil(125)){ // }\r\n                let item = {}\r\n                objItems.push(item)\r\n\r\n                if(walker.source.charCodeAt(walker.index) === 46 && walker.match(/\\.\\.\\.\\s*/g)){\r\n                    item.spread = true\r\n                    item.expr = readTertiaryExpr(walker)\r\n                }else{\r\n                    let walkerIndexBeforeName = walker.index\r\n\r\n                    item.name = readUnaryExpr(walker)\r\n\r\n                    if(item.name.type > 4){\r\n                        throw new Error('[SAN FATAL] unexpect object name: '\r\n                        + walker.source.slice(walkerIndexBeforeName, walker.index))\r\n                    }\r\n\r\n                    if(walker.goUntil(58)){ // :\r\n                        item.expr = readTertiaryExpr(walker)\r\n                    }else {\r\n                        item.expr = item.name\r\n                    }\r\n\r\n                    if(item.name.type === ExprType.ACCESSOR ){\r\n                        item.name = item.name.paths[0]\r\n                    }\r\n                }\r\n\r\n                walker.goUntil(44) // ,\r\n            }\r\n\r\n            return {\r\n                type: ExprType.OBJECT,\r\n                items: objItems\r\n            }\r\n    }\r\n\r\n    return readCall(walker)\r\n}","/**\r\n * 表达式类型\r\n *\r\n * @const\r\n * @type {Object}\r\n */\r\n export let ExprType = {\r\n    STRING: 1,\r\n    NUMBER: 2,\r\n    BOOL: 3,\r\n    ACCESSOR: 4,\r\n    INTERP: 5,\r\n    CALL: 6,\r\n    TEXT: 7,\r\n    BINARY: 8,\r\n    UNARY: 9,\r\n    TERTIARY: 10,\r\n    OBJECT: 11,\r\n    ARRAY: 12,\r\n    NULL: 13\r\n};","import { ExprType } from './expr-type.js'\r\n\r\n/**\r\n * 读取字符串\r\n *\r\n * @param {Walker} walker 源码读取对象\r\n * @return {Object}\r\n */\r\nexport function readString (walker) {\r\n    let startCode = walker.source.charCodeAt(walker.index)\r\n    let value = \"\"\r\n    let charCode\r\n\r\n    walkLoop: while((charCode = walker.nextCode())){\r\n        switch(charCode){\r\n            case 92: // \\\r\n                charCode = walker.nextCode()\r\n                switch(charCode){\r\n                    case 117: // \\u\r\n                        value += String.fromCharCode(parseInt(walker.source.slice(walker.index + 1, walker.index + 5), 16))\r\n                        walker.index += 4\r\n                        break;\r\n                    case 120: //\\x\r\n                        value += String.fromCharCode(parseInt(walker.source.slice(walker.index + 1, walker.index + 3), 16))\r\n                        walker.index += 2\r\n                        break;\r\n                    case 98: \r\n                        value += '\\b'\r\n                        break;\r\n                    case 102:\r\n                        value += '\\f';\r\n                        break;\r\n                    case 110:\r\n                        value += '\\n';\r\n                        break;\r\n                    case 114:\r\n                        value += '\\r';\r\n                        break;\r\n                    case 116:\r\n                        value += '\\t';\r\n                        break;\r\n                    case 118:\r\n                        value += '\\v';\r\n                        break;\r\n                    default:\r\n                        value = String.fromCharCode(charCode)\r\n                }\r\n                break;\r\n            case startCode: \r\n                walker.index++\r\n                break walkLoop;\r\n            default:\r\n                value = String.fromCharCode(charCode)\r\n                break;\r\n        }\r\n    }\r\n\r\n    return {\r\n        type: ExprType.STRING,\r\n        value\r\n    }\r\n}","import { ExprType } from './expr-type.js'\r\nimport { readTertiaryExpr } from './read-tertiary-expr.js'\r\n\r\n/**\r\n * 读取括号表达式\r\n *\r\n * @param {Walker} walker 源码读取对象\r\n * @return {Object}\r\n */\r\nexport function readParenthesizedExpr (walker) {\r\n    walker.index++\r\n    let expr = readTertiaryExpr(walker)\r\n    walker.goUntil(41) // )\r\n    expr.parenthesized = true\r\n\r\n    return expr\r\n}","import { ExprType } from './expr-type.js'\r\nimport { readTertiaryExpr } from './read-tertiary-expr.js'\r\nimport { readAccessor } from './read-accessor.js'\r\n/**\r\n * 读取调用\r\n *\r\n * @param {Walker} walker 源码读取对象\r\n * @param {Array=} defaultArgs 默认参数\r\n * @return {Object}\r\n */\r\n\r\nexport function readCall (walker, defaultArgs) {\r\n    walker.goUntil()\r\n    let result = readAccessor(walker)\r\n\r\n    let args\r\n    if(walker.goUntil(40)){ // )\r\n        args = []\r\n\r\n        while(!walker.goUntil(41)){\r\n            args.push(readTertiaryExpr(walker))\r\n            walker.goUntil(44) // ,\r\n        }\r\n    }else if (defaultArgs) {\r\n        args = defaultArgs\r\n    }\r\n\r\n    if(args){\r\n        result = {\r\n            type: ExprType.CALL,\r\n            name: result,\r\n            args: args\r\n        }\r\n    }\r\n\r\n    return result\r\n}","import { ExprType } from './expr-type.js'\r\nimport { readTertiaryExpr } from './read-tertiary-expr.js'\r\nimport { readIdent } from './read-ident.js'\r\n\r\n/**\r\n * 读取访问表达式\r\n *\r\n * @param {Walker} walker 源码读取对象\r\n * @return {Object}\r\n */\r\nexport function readAccessor (walker) {\r\n    let firstSeg = readIdent(walker)\r\n\r\n    switch(firstSeg){\r\n        case 'true':\r\n        case 'false':\r\n            return {\r\n                type: ExprType.BOOL,\r\n                value: firstSeg === 'true'\r\n            }\r\n        case 'null':\r\n            return {\r\n                type: ExprType.NULL\r\n            }\r\n    }\r\n\r\n    let result = {\r\n        type: ExprType.ACCESSOR,\r\n        paths: [\r\n            {type: ExprType.STRING, value: firstSeg}\r\n        ]\r\n    }\r\n\r\n    accessorLoop: while(1){\r\n        switch(walker.source.charCodeAt(walker.index)){\r\n            case 46: // .\r\n                walker.index++\r\n                result.paths.push({\r\n                    type: ExprType.STRING,\r\n                    value: readIdent(walker)\r\n                })\r\n                break;\r\n            case 91: // [\r\n                walker.index++\r\n                result.paths.push(readTertiaryExpr(walker))\r\n                walker.goUntil(93) // ]\r\n                break;\r\n            default:\r\n                break accessorLoop\r\n        }\r\n    }\r\n\r\n    return result\r\n}","import { ExprType } from './expr-type.js'\r\nimport { readUnaryExpr } from './read-unary-expr.js'\r\n\r\n/**\r\n * 读取乘法表达式\r\n *\r\n * @param {Walker} walker 源码读取对象\r\n * @return {Object}\r\n */\r\nexport function readMultiplicativeExpr (walker) {\r\n    let expr = readUnaryExpr(walker)\r\n\r\n    while(1){\r\n        walker.goUntil()\r\n        let code = walker.source.charCodeAt(walker.index)\r\n\r\n        switch(code){\r\n            case 37: // %\r\n            case 42: // *\r\n            case 47: // /\r\n                walker.index++\r\n                expr = {\r\n                    type: ExprType.BINARY,\r\n                    operator: code,\r\n                    segs: [\r\n                        expr,\r\n                        readUnaryExpr(walker)\r\n                    ]\r\n                }\r\n                continue\r\n        }\r\n\r\n        break;\r\n    }\r\n\r\n    return expr\r\n}","import { ExprType } from './expr-type.js'\r\nimport { readMultiplicativeExpr } from './read-multiplicative-expr.js'\r\n\r\n/**\r\n * 读取加法表达式\r\n *\r\n * @param {Walker} walker 源码读取对象\r\n * @return {Object}\r\n */\r\nexport function readAdditiveExpr (walker) {\r\n    let expr = readMultiplicativeExpr(walker)\r\n\r\n    while(1){\r\n        walker.goUntil()\r\n        let code = walker.source.charCodeAt(walker.index)\r\n\r\n        switch(code){\r\n            case 43: //+\r\n            case 45: //-\r\n                walker.index++\r\n\r\n                expr = {\r\n                    type: ExprType.BINARY,\r\n                    operator: code,\r\n                    segs: [\r\n                        expr,\r\n                        readMultiplicativeExpr(walker)\r\n                    ]\r\n                }\r\n                continue\r\n        }\r\n\r\n        break;\r\n    }\r\n\r\n    return expr\r\n}","import { ExprType } from './expr-type.js'\r\nimport { readAdditiveExpr } from './read-additive-expr.js'\r\n\r\n/**\r\n * 读取关系判断表达式\r\n *\r\n * @param {Walker} walker 源码读取对象\r\n * @return {Object}\r\n */\r\nexport function readRelationalExpr (walker) {\r\n    let expr = readAdditiveExpr(walker)\r\n    walker.goUntil()\r\n\r\n    let code = walker.source.charCodeAt(walker.index)\r\n    switch(code){\r\n        case 60: // < 小于号\r\n        case 62: // > 大于号\r\n            if(walker.nextCode() === 61){\r\n                code += 61\r\n                walker.index++\r\n            }\r\n\r\n            return {\r\n                type: ExprType.BINARY,\r\n                operator: code,\r\n                segs: [\r\n                    expr,\r\n                    readAdditiveExpr(walker)\r\n                ]\r\n            }\r\n    }\r\n\r\n    return expr\r\n}","import { ExprType } from './expr-type.js'\r\nimport { readEqualityExpr } from './read-equality-expr.js'\r\n\r\n/**\r\n * 读取逻辑与表达式\r\n *\r\n * @param {Walker} walker 源码读取对象\r\n * @return {Object}\r\n */\r\nexport function readLogicalAndExpr(walker){\r\n    let expr = readEqualityExpr(walker)\r\n    walker.goUntil()\r\n\r\n    if(walker.source.charCodeAt(walker.index) === 38){\r\n        if(walker.nextCode() === 38){\r\n            walker.index++\r\n\r\n            return {\r\n                type: ExprType.BINARY,\r\n                operator: 76,\r\n                segs: [\r\n                    expr,\r\n                    readLogicalAndExpr(walker)\r\n                ]\r\n            }\r\n        }\r\n\r\n        walker.index--\r\n    }\r\n\r\n    return expr\r\n}","import { ExprType } from './expr-type.js'\r\nimport { readRelationalExpr } from './read-relational-expr.js'\r\n\r\n/**\r\n * 读取相等比对表达式\r\n *\r\n * @param {Walker} walker 源码读取对象\r\n * @return {Object}\r\n */\r\nexport function readEqualityExpr (walker) {\r\n    let expr = readRelationalExpr(walker)\r\n    walker.goUntil()\r\n\r\n    let code = walker.source.charCodeAt(walker.index)\r\n    switch(code){\r\n        case 61: //=\r\n        case 33: //!\r\n            if(walker.nextCode() === 61){\r\n                code += 61\r\n                if(walker.nextCode() === 61){\r\n                    code += 61\r\n                    walker.index++\r\n                }\r\n\r\n                return {\r\n                    type: ExprType.BINARY,\r\n                    operator: code,\r\n                    segs: [\r\n                        expr,\r\n                        readRelationalExpr(walker)\r\n                    ]\r\n                }\r\n            }\r\n            walker.index--\r\n            break;\r\n    }\r\n}","import { ExprType } from './expr-type.js'\r\nimport { readLogicalAndExpr } from './read-logical-and-expr.js'\r\n\r\n/**\r\n * 读取逻辑或表达式\r\n *\r\n * @param {Walker} walker 源码读取对象\r\n * @return {Object}\r\n */\r\nexport function readLogicalOrExpr (walker) {\r\n    let expr = readLogicalAndExpr(walker)\r\n    walker.goUntil()\r\n\r\n    if(walker.source.charCodeAt(walker.index) === 124){ //匹配逻辑或\r\n        if(walker.nextCode() === 124){ //条件成立，继续判断是否还是 |\r\n            walker.index++\r\n\r\n            return {\r\n                type: ExprType.BINARY,\r\n                operator: 248,\r\n                segs: [\r\n                    expr,\r\n                    readLogicalOrExpr(walker)\r\n                ]\r\n            }\r\n        }\r\n\r\n        //不是则后退一步\r\n        walker.index--\r\n    }\r\n\r\n    return expr\r\n}","import { ExprType } from './expr-type.js'\r\nimport { readLogicalOrExpr } from './read-logical-or-expr.js'\r\n/**\r\n * 读取三元表达式\r\n *\r\n * @param {Walker} walker 源码读取对象\r\n * @return {Object}\r\n */\r\n\r\nexport function readTertiaryExpr (walker) {\r\n    let conditional = readLogicalOrExpr(walker)\r\n    walker.goUntil()\r\n\r\n    if(walker.source.charCodeAt(walker.index) === 63){ //如果是问号？\r\n        walker.index++\r\n        let yesExpr = readTertiaryExpr(walker)\r\n        walker.goUntil()\r\n\r\n        if(walker.source.charCodeAt(walker.index) === 58){ //如果是 :\r\n            walker.index++\r\n            return {\r\n                type: ExprType.TERTIARY, //三元表达式\r\n                segs: [\r\n                    conditional,\r\n                    yesExpr,\r\n                    readTertiaryExpr(walker)\r\n                ]\r\n            }\r\n        }\r\n    }\r\n\r\n    return conditional\r\n}","/**\r\n *\r\n * @file 字符串源码读取类\r\n */\r\n\r\n\r\n/**\r\n * 字符串源码读取类，用于模板字符串解析过程\r\n *\r\n * @class\r\n * @param {string} source 要读取的字符串\r\n */\r\nexport function Walker (source) {\r\n    this.source = source\r\n    this.len = source.length\r\n    this.index = 0\r\n}\r\n\r\n/**\r\n * 读取下一个字符，返回下一个字符的 code\r\n *\r\n * @return {number}\r\n */\r\nWalker.prototype.nextCode = function () {\r\n    this.index++\r\n    return this.source.charCodeAt(this.index)\r\n}\r\n\r\n/**\r\n * 向前读取字符，直到遇到指定字符再停止\r\n * 未指定字符时，当遇到第一个非空格、制表符的字符停止\r\n *\r\n * @param {number=} charCode 指定字符的code\r\n * @return {boolean} 当指定字符时，返回是否碰到指定的字符\r\n */\r\nWalker.prototype.goUntil = function (charCode) {\r\n    let code\r\n    while(this.index < this.len && (code = this.source.charCodeAt(this.index))){\r\n        switch(code){\r\n            case 32:\r\n            case 9:\r\n            case 13:\r\n            case 10:\r\n                this.index++\r\n                break;\r\n            default:\r\n                if(code === charCode){\r\n                    this.index++\r\n                    return 1\r\n                }\r\n                return\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 向前读取符合规则的字符片段，并返回规则匹配结果\r\n *\r\n * @param {RegExp} reg 字符片段的正则表达式\r\n * @param {boolean} isMatchStart 是否必须匹配当前位置\r\n * @return {Array?}\r\n */\r\nWalker.prototype.match = function (reg, isMatchStart) {\r\n    reg.lastIndex = this.index\r\n\r\n    let match = reg.exec(this.source)\r\n\r\n    if(match && (!isMatchStart || this.index === match.index)){\r\n        this.index = reg.lastIndex\r\n        return match\r\n    }\r\n}","import { readTertiaryExpr } from './read-tertiary-expr.js'\r\nimport { Walker } from './walker.js'\r\n/**\r\n * 解析表达式\r\n *\r\n * @param {string} source 源码\r\n * @return {Object}\r\n */\r\nexport function parseExpr (source) {\r\n    if(!source){\r\n        return\r\n    }\r\n\r\n    if(typeof source === 'object' && source.type){\r\n        return source\r\n    }\r\n\r\n    return readTertiaryExpr(new Walker(source));\r\n}","import { parseExpr } from '../parser/parse-Expr.js'\r\n//响应式数据方法\r\n//parent为父级数据\r\n//data为初始数据\r\n//listeners为收集数据发生改变的容器\r\nfunction Data (data, parent) {\r\n    this.parent = parent\r\n    this.raw = data || {}\r\n    this.listeners = []\r\n}\r\n\r\n//该方法为获取数据\r\n/**\r\n * 获取数据项\r\n *\r\n * @param {string|Object?} expr 数据项路径\r\n * @param {Data?} callee 当前数据获取的调用环境\r\n * @return {*}\r\n */\r\nData.prototype.get = function (expr, callee) {\r\n    let value = this.raw\r\n    //判断第一个参数有没有传，没传直接返回整个数据\r\n    if(!expr){\r\n        return value\r\n    }\r\n    //不是对象我们需要对他进行处理，得到数据路径\r\n    if(typeof expr !== 'object'){\r\n        expr = parseExpr(expr)\r\n    }\r\n\r\n    let paths = expr.paths\r\n    callee = callee || this\r\n\r\n    //拿解析到的数据路径的第一个key，到原始数据中去找对应的key\r\n    value = value[paths[0].value]\r\n    if(typeof value === 'undefined' && this.parent){\r\n        value = this.parent.get(expr, callee)\r\n    }else{\r\n        for(let i = 1,l = paths.length;value !== null && i < l;i++){\r\n            value = value[paths[i].value]\r\n        }\r\n    }\r\n\r\n    return value\r\n}\r\n\r\n/**\r\n * 数据对象变更操作\r\n *\r\n * @inner\r\n * @param {Object|Array} source 要变更的源数据\r\n * @param {Array} exprPaths 属性路径\r\n * @param {number} pathsStart 当前处理的属性路径指针位置\r\n * @param {number} pathsLen 属性路径长度\r\n * @param {*} value 变更属性值\r\n * @param {Data} data 对应的Data对象\r\n * @return {*} 变更后的新数据\r\n */\r\nData.prototype.immutableSet = function (source, exprPaths, pathsStart, pathsLen, value, data) {\r\n\r\n}\r\n\r\n//改变数据\r\n/**\r\n * 设置数据项\r\n *\r\n * @param {string|Object} expr 数据项路径\r\n * @param {*} value 数据值\r\n * @param {Object=} option 设置参数\r\n * @param {boolean} option.silent 静默设置，不触发变更事件\r\n */\r\nData.prototype.set = function (expr, value, option) {\r\n\r\n}\r\n\r\nexport default Data","import Data from './runtime/data.js'\r\nimport { parseExpr } from './parser/parse-Expr.js'\r\n\r\nlet san = {\r\n    version: '1.0.0',\r\n\r\n    /**\r\n         * 解析表达式\r\n         *\r\n         * @param {string} source 源码\r\n         * @return {Object}\r\n         */\r\n     parseExpr: parseExpr,\r\n\r\n    /**\r\n     * 数据类\r\n     *\r\n     * @class\r\n     * @param {Object?} data 初始数据\r\n     * @param {Data?} parent 父级数据对象\r\n     */\r\n    Data: Data\r\n}\r\nif(typeof window !== 'undefined') window.san = san\r\nexport default san"],"names":["readIdent","walker","match","Error","source","slice","index","readUnaryExpr","goUntil","currentCode","charCodeAt","expr","operator","value","type","postUnaryExpr","charCode","startCode","walkLoop","nextCode","String","fromCharCode","parseInt","readString","readTertiaryExpr","parenthesized","readParenthesizedExpr","arrItems","item","push","spread","items","objItems","walkerIndexBeforeName","name","paths","defaultArgs","args","result","firstSeg","accessorLoop","readAccessor","readCall","readMultiplicativeExpr","code","segs","readAdditiveExpr","readRelationalExpr","readLogicalAndExpr","readEqualityExpr","readLogicalOrExpr","conditional","yesExpr","Walker","this","len","length","parseExpr","Data","data","parent","raw","listeners","prototype","reg","isMatchStart","lastIndex","exec","get","callee","i","l","immutableSet","exprPaths","pathsStart","pathsLen","set","option","san","version","window"],"sourceRoot":""}