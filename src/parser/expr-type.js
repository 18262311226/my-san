/**
 * 表达式类型
 *
 * @const
 * @type {Object}
 */
 export let ExprType = {
    STRING: 1, //字符串，其中不会包含变量
    NUMBER: 2, // 数，其中不会包含变量
    BOOL: 3, //布尔值，其中不会包含变量
    ACCESSOR: 4, // 对变量的访问，需要重点处理
    INTERP: 5, // 插值，在ACCESSOR基础上，可能增加了filter
    CALL: 6, // 函数调用
    TEXT: 7, // 文本值，字符串的拼接，可能是字符串与其他类型的组合
    BINARY: 8, //二元表达式 类如 || && 
    UNARY: 9, // 一元表达式
    TERTIARY: 10, // 三元表达式
    OBJECT: 11, // 对象字面量
    ARRAY: 12, // 数组字面量
    NULL: 13 // null值
};

//正则表达式
//量词元字符
//* 零到多次
//+ 一到多次
//? 零或者一次
//{n} 出现n次
//{n, } 出现n到多次
//{n, m} 出现n到m次


//特殊元字符
//\ 转义字符
//. 除\n(换行)以外的任意字符 
//^ 以哪一个元素符作为开始
//$ 以哪一个元素符作为结束
//\n 换行符
//\d 0-9之间的任意数字
//\D 除0-9之间任意数字
//\w 数字字母，下划线中的任意一个
//\s 一个空白符(包含制表符，空格，换行符)
//\t 一个制表符
//\b 匹配一个单词的边界
//x|y x或者y中的一个字符
//[xyz] x或者y或者z中的任意一个字符
//[^xy] 除了x或者y中的任意一个字符
//[a-z] a到z之间的任意一个字符
//[^a-z] 除了a到z之外的任意一个字符
//() 正则中的分组符号
//(?:) 只匹配不捕获
//(?=) 正向预查
//(?!) 反向预查